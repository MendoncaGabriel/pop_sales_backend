generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusUser {
  ACTIVE
  INACTIVE
}

model User {
  id        String     @id @default(uuid())
  name      String
  phone     String?    @unique
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    StatusUser @default(ACTIVE)

  permissions UserPermission[]
  companys    UserCompany[]
  rotations   UserRotation[]
}

model Permission {
  id        String           @id @default(uuid())
  name      String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  users     UserPermission[]
}

model UserPermission {
  id String @id @default(uuid())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Permission   Permission? @relation(fields: [permissionId], references: [id])
  permissionId String?

  @@unique([userId, permissionId])
}

enum StatusCompany {
  ACTIVE
  INACTIVE
}

model Company {
  id        String        @id @default(uuid())
  name      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    StatusCompany @default(ACTIVE)

  users     UserCompany[]
  products  Product[]
  rotations Rotation[]
}

model UserCompany {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([userId, companyId])
}

model Rotation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stops     Stop[]
  users     UserRotation[]
  Company   Company?       @relation(fields: [companyId], references: [id])
  companyId String?
}

model Stop {
  id        String   @id @default(uuid())
  address   String
  sequence  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  Rotation   Rotation? @relation(fields: [rotationId], references: [id])
  rotationId String?
}

model UserRotation {
  id String @id @default(uuid())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Rotation   Rotation? @relation(fields: [rotationId], references: [id])
  rotationId String?

  @@unique([userId, rotationId])
}

enum TaskStatus {
  COMPLETED
  PENDING
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  finishedAt  DateTime?
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
 
  Stop        Stop?      @relation(fields: [stopId], references: [id])
  stopId      String?
}

model Product {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusUser {
  ACTIVE
  INACTIVE
}

model User {
  id         String       @id @default(uuid())
  name       String
  phone      String?      @unique
  email      String       @unique
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  status     StatusUser   @default(ACTIVE)

  userModules UserModule[]

  Permission     Permission[]
  ownedCompanies Company[]     @relation("Owner")
  collaborations UserCompany[]
}

model Module {
  id         String       @id @default(uuid())
  name       String       @unique // Exemplo: "Entregador", "Vendedor"
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  userModules UserModule[]
}

// Tabela intermedi√°ria para o relacionamento muitos-para-muitos
model UserModule {
  userId   String
  moduleId String

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([userId, moduleId]) // Define a chave composta para evitar duplicatas
}


model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String[] @default([])
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum StatusCompany {
  ACTIVE
  INACTIVE
}

model Company {
  id            String        @id @default(uuid())
  name          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  owner         User          @relation("Owner", fields: [ownerId], references: [id])
  ownerId       String
  status        StatusCompany @default(ACTIVE)
  collaborators UserCompany[]
}

model UserCompany {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusUser {
  ACTIVE
  INACTIVE
}

model User {
  id        String     @id @default(uuid())
  name      String
  phone     String?    @unique
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    StatusUser @default(ACTIVE)

  userModules UserModule[]

  Permission     Permission[]
  ownedCompanies Company[]     @relation("Owner")
  collaborations UserCompany[]
  
  createdRotations  Rotation[] @relation("CreatedRotations")
  assignedRotations Rotation[] @relation("AssignedRotations")
}

model Module {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userModules UserModule[]
  Company     Company?     @relation(fields: [companyId], references: [id])
  companyId   String?
}

model UserModule {
  userId   String
  moduleId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([userId, moduleId])
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String[] @default([])
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum StatusCompany {
  ACTIVE
  INACTIVE
}

model Company {
  id            String        @id @default(uuid())
  name          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  owner         User          @relation("Owner", fields: [ownerId], references: [id])
  ownerId       String
  status        StatusCompany @default(ACTIVE)
  collaborators UserCompany[]
  module        Module[]
}

model UserCompany {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId])
}

model Rotation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation("CreatedRotations", fields: [createdById], references: [id])
  createdById String // Usuário que criou

  assignedTo   User   @relation("AssignedRotations", fields: [assignedToId], references: [id])
  assignedToId String // Usuário a quem foi atribuido a rotação

  stops RotationStop[] // Relação com os endereços da rotação
}

model RotationStop { // Pontos de parada de uma rotação
  id         String   @id @default(uuid())
  address    String
  sequence   Int // Define a ordem da parada
  rotation   Rotation @relation(fields: [rotationId], references: [id])
  rotationId String
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(uuid())
  name        String
  email       String           @unique
  password    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  phone       String?          @unique
  status      StatusUser       @default(ACTIVE)
  companys    UserCompany[]
  permissions UserPermission[]
  rotations   UserRotation[]
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions String[]
  users       UserPermission[]
}

model UserPermission {
  id           String      @id @default(uuid())
  userId       String?
  permissionId String?
  Permission   Permission? @relation(fields: [permissionId], references: [id])
  User         User?       @relation(fields: [userId], references: [id])

  @@unique([userId, permissionId])
}

model Company {
  id        String        @id @default(uuid())
  name      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    StatusCompany @default(ACTIVE)
  products  Product[]
  rotations Rotation[]
  users     UserCompany[]
}

model UserCompany {
  id        String   @id @default(uuid())
  userId    String?
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company? @relation(fields: [companyId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])

  @@unique([userId, companyId])
}

model Rotation {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  companyId   String?
  description String?
  Company     Company?       @relation(fields: [companyId], references: [id])
  stops       Stop[]
  users       UserRotation[]
}

model Stop {
  id         String    @id @default(uuid())
  address    String
  sequence   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  rotationId String?
  Rotation   Rotation? @relation(fields: [rotationId], references: [id])
  tasks      Task[]
}

model UserRotation {
  id         String    @id @default(uuid())
  userId     String?
  rotationId String?
  Rotation   Rotation? @relation(fields: [rotationId], references: [id])
  User       User?     @relation(fields: [userId], references: [id])

  @@unique([userId, rotationId])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  finishedAt  DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      TaskStatus @default(PENDING)
  stopId      String?
  Stop        Stop?      @relation(fields: [stopId], references: [id])
}

model Product {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId String?
  Company   Company? @relation(fields: [companyId], references: [id])
}

enum StatusUser {
  ACTIVE
  INACTIVE
}

enum StatusCompany {
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  COMPLETED
  PENDING
}
